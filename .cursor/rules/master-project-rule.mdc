---
description: 
globs: 
alwaysApply: true
---
# Master Development Protocol - POD Protocol

## ABSOLUTE DEVELOPMENT COMMANDMENTS

### ðŸš« ZERO TOLERANCE POLICIES
**NEVER UNDER ANY CIRCUMSTANCES:**
- Generate stub, skeleton, placeholder, or incomplete code
- Use mock data, fake values, or dummy implementations
- Create TODO comments, FIXME notes, or incomplete sections
- Display false, placeholder, or example data to users
- Assume knowledge without verification through Context7 or web search
- Work on multiple features simultaneously
- Skip testing, documentation, or validation steps
- Use `any` types or untyped variables
- Commit code that doesn't build or pass all tests

### âœ… MANDATORY REQUIREMENTS
**EVERY DEVELOPMENT ACTION MUST:**
- Generate 100% complete, production-ready functionality
- Include comprehensive E2E testing from first implementation
- Provide complete documentation with real examples
- Validate through Context7 MCP server for all libraries/APIs
- Reference and update all memory files during development
- Follow methodical step-by-step validation process

---

## KNOWLEDGE ACQUISITION PROTOCOL

### Context7 MCP Server - PRIMARY SOURCE
**MANDATORY for ALL development:**
```typescript
// Required pattern for every library/API usage
1. Resolve library documentation through Context7 first
2. Store retrieved documentation in knowledge base
3. Reference stored docs during implementation
4. Never assume API knowledge without Context7 verification
```

### Web Search - FALLBACK ONLY
**When Context7 fails:**
```typescript
// Emergency fallback process
1. Use web_search tool for current documentation
2. Verify information from multiple authoritative sources
3. Store all findings in knowledge base immediately
4. Document source and retrieval date
5. Update Context7 knowledge if possible
```

### Knowledge Storage Requirements
**ALL retrieved documentation MUST be stored in:**
- `llm-context-library/` for permanent reference
- Include source, date retrieved, version information
- Tag with relevant POD Protocol components
- Create searchable index for AI agent reference

---

## MEMORY FILE ENFORCEMENT

### MANDATORY MEMORY FILE REFERENCES
**Every development session MUST reference and update:**

#### `.cursor/memory/activeContext.md`
- Current objective and session state
- Active tasks and focus area
- Blockers and dependencies
- Recent decisions and rationale

#### `.cursor/memory/productContext.md`
- Project scope and component organization
- Architecture decisions and constraints
- Integration points and dependencies
- Package structure and relationships

#### `.cursor/memory/progress.md`
- Task completion status and metrics
- Work accomplished and next steps
- Time tracking and velocity
- Quality metrics and test coverage

#### `.cursor/memory/decisionLog.md`
- Technical decisions with full context
- Alternative options considered
- Rationale for chosen approaches
- Consequences and follow-up actions

#### `.cursor/memory/systemPatterns.md`
- Established code patterns and standards
- Reusable components and utilities
- Architecture patterns in use
- Anti-patterns to avoid

#### `.cursor/memory/retrospective.md`
- Lessons learned from development
- Process improvements identified
- Team insights and feedback
- Action items for future sprints

#### `.cursor/memory/userFeedback.md`
- User requirements and feedback
- Feature requests and pain points
- Usage patterns and analytics
- Customer success metrics

### Memory Update Protocol
```typescript
// Required process for every development session
1. Read ALL memory files before starting work
2. Update relevant sections during development
3. Document all decisions and changes
4. Reference specific memory sections in code comments
5. Ensure consistency across all memory files
```

---

## METHODICAL DEVELOPMENT PROCESS

### PHASE 1: ANALYSIS & DESIGN
**MANDATORY QUESTIONING FRAMEWORK:**
```typescript
// Question EVERYTHING before coding
Architecture Questions:
- Does this fit the established POD Protocol architecture?
- Are we following service-oriented patterns correctly?
- How does this integrate with existing components?
- What are the potential failure points?

Scope Questions:
- Is this feature completely defined and scoped?
- Are all requirements clear and testable?
- What are the acceptance criteria?
- How will success be measured?

Design Questions:
- Are we using the optimal design patterns?
- Is the type safety comprehensive?
- How will this scale with user growth?
- What are the security implications?

Logic Questions:
- Is the business logic sound and complete?
- Are all edge cases handled?
- Is error handling comprehensive?
- Are performance implications considered?
```

### PHASE 2: RESEARCH & VERIFICATION
**MANDATORY RESEARCH PROCESS:**
```typescript
1. Resolve ALL library documentation through Context7
   - mcp_context7-mcp_resolve-library-id for each dependency
   - mcp_context7-mcp_get-library-docs for comprehensive docs
   - Store all documentation in knowledge base

2. Verify current best practices through web search
   - Search for latest patterns and approaches
   - Validate against multiple authoritative sources
   - Document findings and rationale

3. Update memory files with research findings
   - Document decisions in decisionLog.md
   - Update systemPatterns.md with new patterns
   - Record in activeContext.md for session tracking
```

### PHASE 3: IMPLEMENTATION
**MANDATORY IMPLEMENTATION STANDARDS:**
```typescript
// Complete functionality from first line
1. Define ALL types before any implementation
   interface CompleteFeatureTypes {
     // Every data structure fully typed
     input: InputDataType;
     output: OutputDataType;
     config: ConfigurationType;
     errors: ErrorType[];
   }

2. Implement full functionality immediately
   - No stubs, placeholders, or TODOs
   - Complete error handling for all scenarios
   - Real data integration from start
   - Production-ready performance

3. Write comprehensive tests alongside implementation
   - Unit tests for all functions
   - Integration tests for service interactions
   - E2E tests for complete user flows
   - Security tests for authentication paths
```

### PHASE 4: VALIDATION & TESTING
**MANDATORY VALIDATION PROCESS:**
```typescript
// Zero tolerance for test failures
1. Unit Test Validation
   - 100% code coverage required
   - All edge cases tested
   - Error conditions validated
   - Performance benchmarks included

2. Integration Test Validation
   - All service interactions tested
   - Database operations validated
   - External API integrations verified
   - Authentication flows confirmed

3. E2E Test Validation
   - Complete user workflows tested
   - Cross-browser compatibility verified
   - Mobile responsiveness confirmed
   - Accessibility compliance validated

4. Security Validation
   - Input validation comprehensive
   - Authentication mechanisms verified
   - Authorization controls tested
   - Data encryption confirmed
```

### PHASE 5: DOCUMENTATION
**MANDATORY DOCUMENTATION STANDARDS:**
```typescript
// Complete documentation required
1. Code Documentation
   - JSDoc/TSDoc for all public APIs
   - Type definitions documented
   - Usage examples with REAL data
   - Error handling scenarios covered

2. Feature Documentation
   - User-facing feature documentation
   - API reference with real examples
   - Integration guides for developers
   - Migration guides for breaking changes

3. Architecture Documentation
   - Design decisions recorded in decisionLog.md
   - Patterns documented in systemPatterns.md
   - Integration points in productContext.md
   - Performance implications noted

4. Testing Documentation
   - Test coverage reports
   - Testing strategy documentation
   - Known limitations documented
   - Performance benchmarks recorded
```

---

## TASK COMPLETION ENFORCEMENT

### SINGLE FEATURE FOCUS
**ABSOLUTE REQUIREMENT:**
```typescript
// One and only one feature at a time
1. Complete ALL phases for current feature
2. Achieve 100% test coverage
3. Generate complete documentation
4. Deploy to staging environment
5. Validate in production-like conditions
6. ONLY THEN consider next feature
```

### COMPLETION CRITERIA
**Feature is COMPLETE when:**
- [ ] All code is production-ready (no stubs/placeholders)
- [ ] 100% test coverage achieved
- [ ] All tests passing (unit, integration, E2E)
- [ ] Complete documentation written
- [ ] Security validation passed
- [ ] Performance benchmarks met
- [ ] User acceptance criteria satisfied
- [ ] Code review approved
- [ ] Deployed to staging successfully
- [ ] Memory files updated with all decisions

### QUALITY GATES
**MANDATORY CHECKPOINTS:**
```typescript
// Must pass ALL gates before proceeding
Gate 1: Design Review
- Architecture questions answered
- Scope completely defined
- Patterns established and documented

Gate 2: Implementation Review
- Code complete and production-ready
- Types fully defined and documented
- No forbidden patterns present

Gate 3: Testing Review
- All test suites passing
- Coverage requirements met
- Security validation complete

Gate 4: Documentation Review
- User documentation complete
- Technical documentation current
- Memory files updated

Gate 5: Deployment Review
- Staging deployment successful
- Performance benchmarks met
- User acceptance confirmed
```

---

## CONTINUOUS VALIDATION FRAMEWORK

### ARCHITECTURAL INTEGRITY
**CONTINUOUS QUESTIONING:**
```typescript
// Ask these questions at EVERY step
1. "Does this maintain our service-oriented architecture?"
2. "Are we following established POD Protocol patterns?"
3. "Is this the most secure implementation approach?"
4. "How will this perform under production load?"
5. "Are we maintaining type safety throughout?"
6. "Is this fully testable and observable?"
```

### SCOPE MANAGEMENT
**SCOPE DISCIPLINE:**
```typescript
// Prevent scope creep at all costs
1. Clearly define feature boundaries
2. Resist adding "just one more thing"
3. Document scope decisions in memory files
4. Complete current scope before expanding
5. Validate scope with stakeholders
```

### DESIGN VALIDATION
**DESIGN REVIEW QUESTIONS:**
```typescript
// Challenge every design decision
1. "Is this the simplest solution that works?"
2. "Are we over-engineering or under-engineering?"
3. "What are the failure modes and how do we handle them?"
4. "How does this integrate with existing systems?"
5. "What are the long-term maintenance implications?"
```

---

## ENFORCEMENT MECHANISMS

### AUTOMATED ENFORCEMENT
```typescript
// Pre-commit hooks MUST reject:
- Any use of `any` types
- TODO/FIXME/HACK comments
- Commented-out code
- Console.log statements
- Mock or placeholder data
- Incomplete function implementations
- Missing type definitions
- Test coverage below 100%
```

### MANUAL ENFORCEMENT
```typescript
// Code review MUST verify:
- Context7 documentation referenced
- Memory files updated appropriately
- Real data integration implemented
- Complete functionality delivered
- Comprehensive testing included
- Security considerations addressed
```

### PROCESS ENFORCEMENT
```typescript
// Development workflow MUST include:
- Research phase with Context7 validation
- Memory file updates at each phase
- Comprehensive questioning framework
- Complete implementation requirements
- Full testing and documentation
- Quality gate validation
```

---

## SUCCESS METRICS

### COMPLETION METRICS
- **Feature Completeness**: 100% of acceptance criteria met
- **Code Quality**: Zero forbidden patterns detected
- **Test Coverage**: 100% coverage with all tests passing
- **Documentation**: Complete user and technical docs
- **Performance**: All benchmarks within acceptable ranges

### PROCESS METRICS
- **Memory File Updates**: All relevant files updated per session
- **Context7 Usage**: Documentation verified for all dependencies
- **Knowledge Storage**: All research findings properly stored
- **Quality Gates**: All gates passed before feature completion
- **Single Feature Focus**: Only one feature in development at a time

### QUALITY METRICS
- **Type Safety**: 100% typed codebase with no `any` usage
- **Security**: All security validations passed
- **Architecture**: Consistent with POD Protocol standards
- **Maintainability**: Clear patterns and documentation
- **Deployability**: Ready for production deployment

---

## VIOLATION CONSEQUENCES

### IMMEDIATE ACTIONS
- **Halt development** until violations corrected
- **Rollback changes** that violate standards
- **Update processes** to prevent recurrence
- **Document lessons** in retrospective.md

### CORRECTIVE MEASURES
- **Additional training** on protocols and standards
- **Enhanced review process** for future development
- **Automated tooling** to prevent violations
- **Process improvements** documented in memory files

---


**THIS PROTOCOL IS NON-NEGOTIABLE. EVERY DEVELOPMENT ACTION MUST COMPLY 100%.**